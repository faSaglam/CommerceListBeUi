// <auto-generated />
using System;
using DataAccess.Concreate;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(CommerceListDbContext))]
    [Migration("20230128154133_items")]
    partial class items
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Concreate.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Entitites.Concrete.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Gıda"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Hijyen"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Kıyafet"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Elektronik"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Kırtasiye"
                        });
                });

            modelBuilder.Entity("Entitites.Concrete.CommerceList", b =>
                {
                    b.Property<int>("CommerceListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommerceListID"), 1L, 1);

                    b.Property<string>("CommerceListName")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsOnMarket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("CommerceListID");

                    b.HasIndex("Id");

                    b.ToTable("CommerceLists");
                });

            modelBuilder.Entity("Entitites.Concrete.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 10,
                            CategoryID = 1,
                            PhotoUrl = "https://image.pngaaa.com/811/324811-middle.png",
                            ProductName = "Salça"
                        },
                        new
                        {
                            ProductID = 11,
                            CategoryID = 1,
                            PhotoUrl = "https://images.migrosone.com/sanalmarket/product/05120000/05120000-a957e2-1650x1650.jpg",
                            ProductName = "Ekmek"
                        },
                        new
                        {
                            ProductID = 12,
                            CategoryID = 1,
                            PhotoUrl = "https://productimages.hepsiburada.net/s/44/375/10818919890994.jpg",
                            ProductName = "Soğan"
                        },
                        new
                        {
                            ProductID = 21,
                            CategoryID = 2,
                            PhotoUrl = "https://productimages.hepsiburada.net/s/6/375/9729860632626.jpg",
                            ProductName = "Bez"
                        },
                        new
                        {
                            ProductID = 22,
                            CategoryID = 2,
                            PhotoUrl = "https://www.ecolabel.com/images/eco-label/deterjan.jpg",
                            ProductName = "Deterjan"
                        },
                        new
                        {
                            ProductID = 23,
                            CategoryID = 2,
                            PhotoUrl = "https://cdn.thomasnet.com/insights-images/embedded-images/4399ffd9-4ce9-4ba7-a008-c41bed53921a/cec9fc52-c432-4d7d-8583-77c18c6e7601/FullHD/private-label-soap-suppliers.jpg",
                            ProductName = "Sabun"
                        },
                        new
                        {
                            ProductID = 31,
                            CategoryID = 3,
                            PhotoUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRMAKVjxVwhCvmhbnjggKlsehqXzaOr0Mi0yA&usqp=CAU",
                            ProductName = "Tişört"
                        },
                        new
                        {
                            ProductID = 32,
                            CategoryID = 3,
                            PhotoUrl = "https://img-incommerce-yargici.mncdn.com/Content/Images/Thumbs/22152666_mor-mini-etek-1yket4104x050.jpeg",
                            ProductName = "Etek"
                        },
                        new
                        {
                            ProductID = 33,
                            CategoryID = 2,
                            PhotoUrl = "https://sarar.com/sarar-jam-lacivert-blazer-ceket-4387-blazer-ceket-sarar-3771-43-K.jpg",
                            ProductName = "Ceket"
                        },
                        new
                        {
                            ProductID = 41,
                            CategoryID = 4,
                            PhotoUrl = "https://www.monofiyat.com/images/thumbs/0009879_mf-product-shift-0112-wireless-mouse-siyah.jpeg",
                            ProductName = "Mouse"
                        },
                        new
                        {
                            ProductID = 42,
                            CategoryID = 4,
                            PhotoUrl = "https://www.dhresource.com/0x0/f2/albu/g5/M01/F2/54/rBVaJFk0tMqAEu5SAADL85n_65Y599.jpg",
                            ProductName = "Klavye"
                        },
                        new
                        {
                            ProductID = 43,
                            CategoryID = 4,
                            PhotoUrl = "https://d9v7j6n3.rocketcdn.me/wp-content/uploads/2022/05/oppo-a16-1024x576.jpg",
                            ProductName = "Akıllı Telefon"
                        },
                        new
                        {
                            ProductID = 51,
                            CategoryID = 5,
                            PhotoUrl = "https://cdn.shopify.com/s/files/1/0266/6967/8627/products/00_defter_ic_9558d3c7-5d3a-4815-b246-03881fd7b46f_700x700.jpg?v=1603360470",
                            ProductName = "Defter"
                        },
                        new
                        {
                            ProductID = 52,
                            CategoryID = 5,
                            PhotoUrl = "https://www.ilpen.com.tr/6706-large_default/koseli-naturel-kursun-kalem.jpg",
                            ProductName = "Kalem"
                        },
                        new
                        {
                            ProductID = 53,
                            CategoryID = 5,
                            PhotoUrl = "https://bilimgenc.tubitak.gov.tr/sites/default/files/styles/bp-770px-custom_user_desktop_1x/public/silgi_kapak2.jpg?itok=XzuMmKjw",
                            ProductName = "Silgi"
                        });
                });

            modelBuilder.Entity("Entitites.Concrete.ProductCommerceList", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("CommerceListID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBought")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("ProductID", "CommerceListID");

                    b.HasIndex("CommerceListID");

                    b.ToTable("ProductCommerceList");
                });

            modelBuilder.Entity("Entitites.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76ca3750-e8b1-42ce-b3d9-e403ad9f9466",
                            Email = "omfasaglam@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "OMFASAGLAM@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAsty4zBaUFwfUhcB2GUtfgFdzPIzSEWoFWQIFqWKYKOJGAZjp3/vqiQasn/MqXmAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f03c6ca-7740-4c21-941a-3b8f7b6bd72c",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entitites.Concrete.CommerceList", b =>
                {
                    b.HasOne("Entitites.Concrete.User", "Users")
                        .WithMany("CommerceLists")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entitites.Concrete.Product", b =>
                {
                    b.HasOne("Entitites.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entitites.Concrete.ProductCommerceList", b =>
                {
                    b.HasOne("Entitites.Concrete.CommerceList", "CommerceList")
                        .WithMany("Products")
                        .HasForeignKey("CommerceListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entitites.Concrete.Product", "Product")
                        .WithMany("CommerceLists")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommerceList");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Entities.Concreate.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entitites.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entitites.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Entities.Concreate.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entitites.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entitites.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entitites.Concrete.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entitites.Concrete.CommerceList", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entitites.Concrete.Product", b =>
                {
                    b.Navigation("CommerceLists");
                });

            modelBuilder.Entity("Entitites.Concrete.User", b =>
                {
                    b.Navigation("CommerceLists");
                });
#pragma warning restore 612, 618
        }
    }
}
